# Docker Compose profiles:
# - Default (no profile): Starts all services including self-hosted Supabase
# - Agents are opt-in: archon-agents starts only with the "agents" profile
# Usage:
#   docker compose up                        # Starts all services (agents disabled)
#   docker compose --profile agents up -d    # Also starts archon-agents

services:
  # Self-hosted Supabase Database
  supabase-db:
    image: supabase/postgres:${SUPABASE_DB_VERSION}
    container_name: supabase-db
    restart: unless-stopped
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - supabase-db-data:/var/lib/postgresql/data
      - ./migration/complete_setup.sql:/docker-entrypoint-initdb.d/complete_setup.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Self-hosted Supabase API (PostgREST)
  supabase-api:
    image: postgrest/postgrest:${SUPABASE_API_VERSION}
    container_name: supabase-api
    restart: unless-stopped
    ports:
      - "${SUPABASE_API_PORT}:3000"
    environment:
      PGRST_DB_URI: postgres://${DB_USER}:${DB_PASSWORD}@supabase-db:5432/${DB_NAME}
      PGRST_DB_ANON_ROLE: anon
      PGRST_DB_SCHEMAS: public
      PGRST_DB_EXTRA_SEARCH_PATH: public
      PGRST_JWT_SECRET: ${JWT_SECRET:-fe2b745215214b52485c9110614a8d6b7637801a0e4441e5954013d33937f91a}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    depends_on:
      supabase-db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Self-hosted Supabase Meta
  supabase-meta:
    image: supabase/postgres-meta:${SUPABASE_META_VERSION}
    container_name: supabase-meta
    restart: unless-stopped
    ports:
      - "${SUPABASE_META_PORT}:8080"
    environment:
      PG_META_DB_HOST: supabase-db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: ${DB_NAME}
      PG_META_DB_USER: ${DB_USER}
      PG_META_DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      supabase-db:
        condition: service_healthy
    networks:
      - app-network

  # Self-hosted Supabase Studio
  supabase-studio:
    image: supabase/studio:${SUPABASE_STUDIO_VERSION}
    container_name: supabase-studio
    restart: unless-stopped
    ports:
      - "${SUPABASE_STUDIO_PORT}:3000"
    environment:
      SUPABASE_URL: http://supabase-api:3000
      SUPABASE_ANON_KEY: ${ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
    depends_on:
      supabase-api:
        condition: service_healthy
    networks:
      - app-network

  # Server Service (FastAPI + Socket.IO + Crawling)
  archon-server:
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
        ARCHON_SERVER_PORT: ${ARCHON_SERVER_PORT:-8181}
    container_name: archon-server
    restart: unless-stopped
    ports:
      - "${ARCHON_SERVER_PORT:-8181}:${ARCHON_SERVER_PORT:-8181}"
    environment:
      - SUPABASE_URL=http://supabase-api:3000
      - SUPABASE_SERVICE_KEY=${SERVICE_ROLE_KEY}
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@supabase-db:5432/${DB_NAME}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
      - SERVICE_DISCOVERY_MODE=docker_compose
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - ARCHON_MCP_PORT=${ARCHON_MCP_PORT:-8051}
      - ARCHON_AGENTS_PORT=${ARCHON_AGENTS_PORT:-8052}
      - AGENTS_ENABLED=${AGENTS_ENABLED:-false}
    networks:
      - app-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Docker socket for MCP container control
      - ./server/src:/app/src # Mount source code for hot reload
      - ./server/tests:/app/tests # Mount tests for UI test execution
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      supabase-db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          'python -c "import urllib.request; urllib.request.urlopen(''http://localhost:${ARCHON_SERVER_PORT:-8181}/health'')"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Lightweight MCP Server Service (HTTP-based)
  archon-mcp:
    build:
      context: ./mcp_server
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
        ARCHON_MCP_PORT: ${ARCHON_MCP_PORT:-8051}
    container_name: archon-mcp
    restart: unless-stopped
    ports:
      - "${ARCHON_MCP_PORT:-8051}:${ARCHON_MCP_PORT:-8051}"
    environment:
      - SUPABASE_URL=http://supabase-api:3000
      - SUPABASE_SERVICE_KEY=${SERVICE_ROLE_KEY}
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@supabase-db:5432/${DB_NAME}
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
      - SERVICE_DISCOVERY_MODE=docker_compose
      - TRANSPORT=sse
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # MCP needs to know where to find other services
      - API_SERVICE_URL=http://archon-server:${ARCHON_SERVER_PORT:-8181}
      - AGENTS_ENABLED=${AGENTS_ENABLED:-false}
      - AGENTS_SERVICE_URL=${AGENTS_SERVICE_URL:-http://archon-agents:${ARCHON_AGENTS_PORT:-8052}}
      - ARCHON_MCP_PORT=${ARCHON_MCP_PORT:-8051}
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - ARCHON_AGENTS_PORT=${ARCHON_AGENTS_PORT:-8052}
    networks:
      - app-network
    depends_on:
      archon-server:
        condition: service_healthy
      supabase-db:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          'python -c "import socket; s=socket.socket(); s.connect((''localhost'', ${ARCHON_MCP_PORT:-8051})); s.close()"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s # Give dependencies time to start

  # AI Agents Service (ML/Reranking)
  archon-agents:
    profiles:
      - agents # Only starts when explicitly using --profile agents
    build:
      context: ./mcp_server
      dockerfile: Dockerfile.agents
      args:
        BUILDKIT_INLINE_CACHE: 1
        ARCHON_AGENTS_PORT: ${ARCHON_AGENTS_PORT:-8052}
    container_name: archon-agents
    restart: unless-stopped
    ports:
      - "${ARCHON_AGENTS_PORT:-8052}:${ARCHON_AGENTS_PORT:-8052}"
    environment:
      - SUPABASE_URL=http://supabase-api:3000
      - SUPABASE_SERVICE_KEY=${SERVICE_ROLE_KEY}
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@supabase-db:5432/${DB_NAME}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
      - SERVICE_DISCOVERY_MODE=docker_compose
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ARCHON_AGENTS_PORT=${ARCHON_AGENTS_PORT:-8052}
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          'python -c "import urllib.request; urllib.request.urlopen(''http://localhost:${ARCHON_AGENTS_PORT:-8052}/health'')"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  archon-frontend:
    build:
      context: ./ui
      dockerfile: Dockerfile
    container_name: archon-frontend
    restart: unless-stopped
    ports:
      - "${ARCHON_FRONTEND_PORT:-3737}:3737"
    environment:
      - VITE_SUPABASE_URL=http://localhost:${SUPABASE_API_PORT}
      - VITE_SUPABASE_ANON_KEY=${ANON_KEY}
      - VITE_API_URL=http://${HOST:-localhost}:${ARCHON_SERVER_PORT:-8181}
      - VITE_ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - HOST=${HOST:-localhost}
      - PROD=${PROD:-false}
      - VITE_ALLOWED_HOSTS=${VITE_ALLOWED_HOSTS:-}
      - VITE_SHOW_DEVTOOLS=${VITE_SHOW_DEVTOOLS:-false}
    networks:
      - app-network
    volumes:
      - ./ui/src:/app/src
      - ./ui/public:/app/public
    depends_on:
      supabase-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3737"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  supabase-db-data:
    driver: local
